generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// User model (base for all user types)
model User {
    id        String   @id @default(cuid())
    email     String   @unique
    phone     String?  @unique
    password  String
    name      String
    avatar    String?
    isActive  Boolean  @default(true)
    role      UserRole
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    customer Customer?
    rider    Rider?
    vendor   Vendor?
    admin    Admin?

    @@map("users")
}

// Customer specific data
model Customer {
    id          String         @id @default(cuid())
    userId      String         @unique
    user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    dateOfBirth DateTime?
    addresses   Address[]
    orders      Order[]
    reviews     Review[]
    payments    Payment[]      // Add this line
    pushToken   String?
    
    // ðŸš€ NEW: Customer Status Management
    status      CustomerStatus @default(ACTIVE)
    
    // ðŸš€ NEW: Customer Performance Tracking
    totalOrders     Int      @default(0)
    completedOrders Int      @default(0)
    cancelledOrders Int      @default(0)
    totalSpent      Float    @default(0)
    avgOrderValue   Float    @default(0)
    
    createdAt   DateTime       @default(now())
    updatedAt   DateTime       @updatedAt

    @@map("customers")
}

// ðŸš€ NEW: Logistics Companies (Parent entities)
model LogisticsCompany {
    id            String                    @id @default(cuid())
    name          String                    @unique
    contactPerson String
    phone         String
    email         String
    address       String?
    status        LogisticsCompanyStatus    @default(ACTIVE)
    riders        Rider[]
    createdAt     DateTime                  @default(now())
    updatedAt     DateTime                  @updatedAt

    @@map("logistics_companies")
}

// Updated Rider model (now belongs to a logistics company)
model Rider {
    id              String      @id @default(cuid())
    userId          String      @unique
    user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    companyId       String?
    company         LogisticsCompany? @relation(fields: [companyId], references: [id])
    vehicleType     VehicleType
    isOnline        Boolean     @default(false)
    isAvailable     Boolean     @default(false)
    currentLat      Float?
    currentLng      Float?
    bankAccount     String?
    earnings        Float       @default(0)
    completedOrders Int         @default(0)
    rating          Float       @default(0)
    pushToken       String?     // ðŸš€ NEW: FCM push token
    currentOrderId  String?     // ðŸš€ NEW: Track current order
    orders          Order[]
    earningsHistory RiderEarning[]
    wallet          RiderWallet?
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt

    @@map("riders")
}

// ðŸš€ NEW: Rider Earnings tracking
model RiderEarning {
    id          String   @id @default(cuid())
    riderId     String
    rider       Rider    @relation(fields: [riderId], references: [id], onDelete: Cascade)
    orderId     String?  // Optional - might be from different sources
    amount      Float
    type        EarningType @default(DELIVERY_FEE)
    description String?
    date        DateTime @default(now())
    createdAt   DateTime @default(now())

    @@map("rider_earnings")
}

// ðŸš€ NEW: Rider Order History
model RiderOrderHistory {
    id        String              @id @default(cuid())
    riderId   String
    orderId   String
    status    OrderHistoryStatus
    timestamp DateTime            @default(now())
    notes     String?

    @@map("rider_order_history")
}

// Vendor specific data
model Vendor {
    id              String     @id @default(cuid())
    userId          String     @unique
    user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    businessName    String
    businessAddress String?
    latitude        Float?
    longitude       Float?
    description     String?
    logo            String?
    coverImage      String?
    isActive        Boolean    @default(true)
    isOpen          Boolean    @default(false)
    rating          Float      @default(0)
    pushToken       String?     // ðŸš€ NEW: FCM push token
    wallet          VendorWallet?

    status          VendorStatus @default(PENDING)
    openingTime     String?
    closingTime     String?
    operatingDays   String[]    @default([])  // e.g ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]

    totalOrders     Int        @default(0)
    completedOrders Int        @default(0)
    cancelledOrders Int        @default(0)
    avgPrepTime     Float?     // in minutes 

    categories      Category[]
    menuItems       MenuItem[]
    orders          Order[]
    reviews         Review[] 
    createdAt       DateTime   @default(now())
    updatedAt       DateTime   @updatedAt

    @@map("vendors")
}

// Admin specific data
model Admin {
    id          String   @id @default(cuid())
    userId      String   @unique
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    pushToken   String?     // ðŸš€ NEW: FCM push token
    permissions String[]
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@map("admins")
}

// Address model
model Address {
    id         String   @id @default(cuid())
    customerId String
    customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
    title      String
    address    String
    city       String?
    state      String?
    country    String   @default("Nigeria")
    lat        Float?
    lng        Float?
    isDefault  Boolean  @default(false)
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@map("addresses")
}

// Category model
model Category {
    id          String     @id @default(cuid())
    name        String     @unique
    description String?
    image       String?
    isActive    Boolean    @default(true)
    vendors     Vendor[]
    menuItems   MenuItem[]
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt

    @@map("categories")
}

// Menu Item model
model MenuItem {
    id              String      @id @default(cuid())
    vendorId        String
    vendor          Vendor      @relation(fields: [vendorId], references: [id], onDelete: Cascade)
    categoryId      String
    category        Category    @relation(fields: [categoryId], references: [id])
    name            String
    description     String?
    price           Float
    image           String?
    isAvailable     Boolean     @default(true)
    preparationTime Int         @default(15) // in minutes
    addOns          MenuAddOn[]
    orderItems      OrderItem[]
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt

    @@map("menu_items")
}

// Menu Add-on model
model MenuAddOn {
    id          String   @id @default(cuid())
    menuItemId  String
    menuItem    MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
    name        String
    description String?
    price       Float
    isRequired  Boolean  @default(false)
    maxQuantity Int      @default(1)
    category    AddOnCategory
    orderItemAddOns OrderItemAddOn[]
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@map("menu_add_ons")
}

// Order model
model Order {
    id                    String      @id @default(cuid())
    orderNumber           String      @unique
    customerId            String
    customer              Customer    @relation(fields: [customerId], references: [id])
    vendorId              String
    vendor                Vendor      @relation(fields: [vendorId], references: [id])
    riderId               String?
    rider                 Rider?      @relation(fields: [riderId], references: [id])
    payments              Payment[]   // Add this line
    status                OrderStatus @default(PENDING)
    subtotal              Float
    deliveryFee           Float
    serviceFee            Float
    total                 Float?
    items                 OrderItem[]
    deliveryQueue   DeliveryQueue?
    deliveryAddress       Json
    specialInstructions   String?
    estimatedDeliveryTime DateTime?
    cancelledAt           DateTime?
    cancellationReason    String?
    createdAt             DateTime    @default(now())
    updatedAt             DateTime    @updatedAt

    @@map("orders")
}

// Order Item model
model OrderItem {
    id                  String   @id @default(cuid())
    orderId             String
    order               Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
    menuItemId          String
    menuItem            MenuItem @relation(fields: [menuItemId], references: [id])
    quantity            Int
    unitPrice           Float
    totalPrice          Float
    specialInstructions String?
    addOns              OrderItemAddOn[]
    createdAt           DateTime @default(now())

    @@map("order_items")
}

// Order Item Add-on model
model OrderItemAddOn {
    id          String    @id @default(cuid())
    orderItemId String
    orderItem   OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
    addOnId     String
    addOn       MenuAddOn @relation(fields: [addOnId], references: [id])
    quantity    Int       @default(1)
    price       Float
    createdAt   DateTime  @default(now())

    @@map("order_item_add_ons")
}

// Review model
model Review {
    id         String   @id @default(cuid())
    customerId String
    customer   Customer @relation(fields: [customerId], references: [id])
    vendorId   String
    vendor     Vendor   @relation(fields: [vendorId], references: [id])
    orderId    String   @unique
    rating     Int // 1-5
    comment    String?
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@map("reviews")
}

// ðŸš€ NEW: Delivery Queue for FIFO order processing
model DeliveryQueue {
    id              String              @id @default(cuid())
    orderId         String              @unique
    order           Order               @relation(fields: [orderId], references: [id], onDelete: Cascade)
    status          DeliveryQueueStatus @default(QUEUED)
    attempts        Int                 @default(0)
    position        Int                 // Position in FIFO queue
    expiresAt       DateTime            // When this job expires
    createdAt       DateTime            @default(now())
    updatedAt       DateTime            @updatedAt

    @@map("delivery_queue")
}

// Payment tracking for customer orders
model Payment {
    id                String          @id @default(cuid())
    orderId           String
    order             Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
    customerId        String
    customer          Customer        @relation(fields: [customerId], references: [id], onDelete: Cascade)
    
    // Payment details
    transactionId     String?         @unique // Gateway transaction ID
    gatewayReference  String?         // Gateway reference number
    amount            Float           // Amount in kobo (NGN)
    currency          String          @default("NGN")
    gateway           PaymentGateway  @default(PAYSTACK)
    paymentMethod     PaymentMethod   @default(CARD)
    
    // Status tracking
    status            PaymentStatus   @default(PENDING)
    gatewayResponse   Json?           // Full gateway response
    
    // Metadata
    customerEmail     String
    customerPhone     String?
    description       String?
    
    // Timestamps
    initiatedAt       DateTime        @default(now())
    completedAt       DateTime?
    failedAt          DateTime?
    
    // Retry tracking
    retryCount        Int             @default(0)
    maxRetries        Int             @default(3)
    
    // Relations
    refunds           Refund[]
    createdAt         DateTime        @default(now())
    updatedAt         DateTime        @updatedAt

    @@map("payments")
}

// Refund tracking
model Refund {
    id                String          @id @default(cuid())
    paymentId         String
    payment           Payment         @relation(fields: [paymentId], references: [id], onDelete: Cascade)
    
    // Refund details
    refundId          String?         @unique // Gateway refund ID
    amount            Float           // Refund amount in kobo
    reason            String
    status            RefundStatus    @default(PENDING)
    gatewayResponse   Json?           // Gateway refund response
    
    // Admin tracking
    initiatedBy       String          // Admin user ID who initiated
    approvedBy        String?         // Admin user ID who approved (if required)
    
    // Timestamps
    initiatedAt       DateTime        @default(now())
    processedAt       DateTime?
    completedAt       DateTime?
    
    createdAt         DateTime        @default(now())
    updatedAt         DateTime        @updatedAt

    @@map("refunds")
}

// Vendor wallet and balance tracking
model VendorWallet {
    id                String          @id @default(cuid())
    vendorId          String          @unique
    vendor            Vendor          @relation(fields: [vendorId], references: [id], onDelete: Cascade)
    
    // Balance tracking
    currentBalance    Float           @default(0) // Available balance in kobo
    pendingBalance    Float           @default(0) // Pending payout balance in kobo
    totalEarnings     Float           @default(0) // Lifetime earnings in kobo
    totalPaidOut      Float           @default(0) // Total amount paid out in kobo
    
    // Commission tracking
    totalCommission   Float           @default(0) // Total commission deducted
    commissionRate    Float           @default(0.15) // 15% default commission
    
    // Payout settings
    payoutMethod      PayoutMethod    @default(BANK_TRANSFER)
    bankDetails       Json?           // Encrypted bank details
    payoutFrequency   PayoutFrequency @default(WEEKLY)
    minimumPayout     Float           @default(10000) // Minimum payout amount (100 NGN)
    
    // Status
    isActive          Boolean         @default(true)
    lastPayoutDate    DateTime?
    nextPayoutDate    DateTime?
    
    createdAt         DateTime        @default(now())
    updatedAt         DateTime        @updatedAt

    @@map("vendor_wallets")
}

// Rider wallet and balance tracking
model RiderWallet {
    id                String          @id @default(cuid())
    riderId           String          @unique
    rider             Rider           @relation(fields: [riderId], references: [id], onDelete: Cascade)
    
    // Balance tracking
    currentBalance    Float           @default(0) // Available balance in kobo
    pendingBalance    Float           @default(0) // Pending payout balance in kobo
    totalEarnings     Float           @default(0) // Lifetime earnings in kobo
    totalPaidOut      Float           @default(0) // Total amount paid out in kobo
    
    // Commission tracking
    totalCommission   Float           @default(0) // Total commission deducted
    commissionRate    Float           @default(0.10) // 10% default commission for riders
    
    // Payout settings
    payoutMethod      PayoutMethod    @default(BANK_TRANSFER)
    bankDetails       Json?           // Encrypted bank details
    payoutFrequency   PayoutFrequency @default(DAILY)
    minimumPayout     Float           @default(5000) // Minimum payout amount (50 NGN)
    
    // Status
    isActive          Boolean         @default(true)
    lastPayoutDate    DateTime?
    nextPayoutDate    DateTime?
    
    createdAt         DateTime        @default(now())
    updatedAt         DateTime        @updatedAt

    @@map("rider_wallets")
}

// Payout transactions
model Payout {
    id                String          @id @default(cuid())
    
    // Recipient details
    recipientType     PayoutRecipient @default(VENDOR)
    recipientId       String          // Vendor ID or Rider ID
    
    // Amount details
    amount            Float           // Payout amount in kobo
    currency          String          @default("NGN")
    
    // Status tracking
    status            PayoutStatus    @default(PENDING)
    gatewayResponse   Json?           // Gateway payout response
    gatewayReference  String?         // Gateway reference number
    
    // Bank details (encrypted)
    bankDetails       Json?           // Bank account details
    
    // Admin tracking
    initiatedBy       String          // Admin user ID
    processedBy       String?         // System or admin who processed
    approvedBy        String?         // Admin who approved (if required)
    
    // Timestamps
    initiatedAt       DateTime        @default(now())
    processedAt       DateTime?
    completedAt       DateTime?
    failedAt          DateTime?
    
    // Failure details
    failureReason     String?
    retryCount        Int             @default(0)
    maxRetries        Int             @default(3)
    
    // Metadata
    description       String?
    notes             String?
    
    createdAt         DateTime        @default(now())
    updatedAt         DateTime        @updatedAt

    @@map("payouts")
}

// Enums
enum UserRole {
    CUSTOMER
    RIDER
    VENDOR
    ADMIN
}

enum VehicleType {
    BIKE
    CAR
    MOTORCYCLE
}

enum OrderStatus {
    PENDING
    CONFIRMED
    PREPARING
    READY_FOR_PICKUP
    ASSIGNED
    PICKED_UP
    OUT_FOR_DELIVERY
    DELIVERED
    CANCELLED
}

enum AddOnCategory {
    EXTRA
    SIZE
    SIDE
    CUSTOMIZATION
}

// ðŸš€ NEW: Delivery Queue Status Enum
enum DeliveryQueueStatus {
    QUEUED
    BROADCASTING
    ASSIGNED
    TIMEOUT
    REJECTED
    COMPLETED
}

// ðŸš€ NEW: Logistics Company Status
enum LogisticsCompanyStatus {
    ACTIVE
    SUSPENDED
    BLOCKED
}

// ðŸš€ NEW: Earning Types
enum EarningType {
    DELIVERY_FEE
    BONUS
    TIP
    PENALTY
}

// ðŸš€ NEW: Order History Status
enum OrderHistoryStatus {
    COMPLETED
    CANCELLED
    REASSIGNED
    FAILED
}

// ðŸš€ NEW: Vendor Status
enum VendorStatus {
    PENDING
    APPROVED
    SUSPENDED
    REJECTED
    BLOCKED
}

// ðŸš€ NEW: Customer Status Enum
enum CustomerStatus {
    ACTIVE
    SUSPENDED
    BLOCKED
    VERIFICATION_PENDING
}

enum PaymentGateway {
    PAYSTACK
    FLUTTERWAVE
    STRIPE
    SQUARE
}

enum PaymentMethod {
    CARD
    BANK_TRANSFER
    WALLET
    CASH
}

enum PaymentStatus {
    PENDING
    PROCESSING
    SUCCESS
    FAILED
    CANCELLED
    REFUNDED
}

enum RefundStatus {
    PENDING
    PROCESSING
    SUCCESS
    FAILED
    CANCELLED
}

enum PayoutMethod {
    BANK_TRANSFER
    WALLET
    CASH
}

enum PayoutFrequency {
    DAILY
    WEEKLY
    MONTHLY
    MANUAL
}

enum PayoutRecipient {
    VENDOR
    RIDER
}

enum PayoutStatus {
    PENDING
    PROCESSING
    SUCCESS
    FAILED
    CANCELLED
    REJECTED
}