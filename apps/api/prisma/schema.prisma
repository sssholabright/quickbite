generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// User model (base for all user types)
model User {
    id        String   @id @default(cuid())
    email     String   @unique
    phone     String?  @unique
    password  String
    name      String
    avatar    String?
    isActive  Boolean  @default(true)
    role      UserRole
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    customer Customer?
    rider    Rider?
    vendor   Vendor?
    admin    Admin?

    @@map("users")
}

// Customer specific data
model Customer {
    id          String    @id @default(cuid())
    userId      String    @unique
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    dateOfBirth DateTime?
    addresses   Address[]
    orders      Order[]
    reviews     Review[]
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    @@map("customers")
}

// Rider specific data
model Rider {
    id              String      @id @default(cuid())
    userId          String      @unique
    user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    vehicleType     VehicleType
    isOnline        Boolean     @default(false)
    isAvailable     Boolean     @default(false)
    currentLat      Float?
    currentLng      Float?
    bankAccount     String?
    earnings        Float       @default(0)
    completedOrders Int         @default(0)
    rating          Float       @default(0)
    orders          Order[]
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt

    @@map("riders")
}

// Vendor specific data
model Vendor {
    id              String     @id @default(cuid())
    userId          String     @unique
    user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    businessName    String
    businessAddress String?
    latitude        Float?
    longitude       Float?
    description     String?
    logo            String?
    coverImage      String?
    isActive        Boolean    @default(true)
    isOpen          Boolean    @default(false)
    rating          Float      @default(0)
    categories      Category[]
    menuItems       MenuItem[]
    orders          Order[]
    reviews         Review[]
    createdAt       DateTime   @default(now())
    updatedAt       DateTime   @updatedAt

    @@map("vendors")
}

// Admin specific data
model Admin {
    id          String   @id @default(cuid())
    userId      String   @unique
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    permissions String[]
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@map("admins")
}

// Address model
model Address {
    id         String   @id @default(cuid())
    customerId String
    customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
    title      String
    address    String
    city       String?
    state      String?
    country    String   @default("Nigeria")
    lat        Float?
    lng        Float?
    isDefault  Boolean  @default(false)
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@map("addresses")
}

// Category model
model Category {
    id          String     @id @default(cuid())
    name        String     @unique
    description String?
    image       String?
    isActive    Boolean    @default(true)
    vendors     Vendor[]
    menuItems   MenuItem[]
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt

    @@map("categories")
}

// Menu Item model
model MenuItem {
    id              String      @id @default(cuid())
    vendorId        String
    vendor          Vendor      @relation(fields: [vendorId], references: [id], onDelete: Cascade)
    categoryId      String
    category        Category    @relation(fields: [categoryId], references: [id])
    name            String
    description     String?
    price           Float
    image           String?
    isAvailable     Boolean     @default(true)
    preparationTime Int         @default(15) // in minutes
    addOns          MenuAddOn[]
    orderItems      OrderItem[]
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt

    @@map("menu_items")
}

// Menu Add-on model
model MenuAddOn {
    id          String   @id @default(cuid())
    menuItemId  String
    menuItem    MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
    name        String
    description String?
    price       Float
    isRequired  Boolean  @default(false)
    maxQuantity Int      @default(1)
    category    AddOnCategory
    orderItemAddOns OrderItemAddOn[]
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@map("menu_add_ons")
}

// Order model
model Order {
    id                    String      @id @default(cuid())
    orderNumber           String      @unique
    customerId            String
    customer              Customer    @relation(fields: [customerId], references: [id])
    vendorId              String
    vendor                Vendor      @relation(fields: [vendorId], references: [id])
    riderId               String?
    rider                 Rider?      @relation(fields: [riderId], references: [id])
    status                OrderStatus @default(PENDING)
    subtotal              Float
    deliveryFee           Float
    serviceFee            Float
    total                 Float?
    items                 OrderItem[]
    deliveryAddress       Json
    specialInstructions   String?
    estimatedDeliveryTime DateTime?
    cancelledAt           DateTime?
    cancellationReason    String?
    createdAt             DateTime    @default(now())
    updatedAt             DateTime    @updatedAt

    @@map("orders")
}

// Order Item model
model OrderItem {
    id                  String   @id @default(cuid())
    orderId             String
    order               Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
    menuItemId          String
    menuItem            MenuItem @relation(fields: [menuItemId], references: [id])
    quantity            Int
    unitPrice           Float
    totalPrice          Float
    specialInstructions String?
    addOns              OrderItemAddOn[]
    createdAt           DateTime @default(now())

    @@map("order_items")
}

// Order Item Add-on model
model OrderItemAddOn {
    id          String    @id @default(cuid())
    orderItemId String
    orderItem   OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
    addOnId     String
    addOn       MenuAddOn @relation(fields: [addOnId], references: [id])
    quantity    Int       @default(1)
    price       Float
    createdAt   DateTime  @default(now())

    @@map("order_item_add_ons")
}

// Review model
model Review {
    id         String   @id @default(cuid())
    customerId String
    customer   Customer @relation(fields: [customerId], references: [id])
    vendorId   String
    vendor     Vendor   @relation(fields: [vendorId], references: [id])
    orderId    String   @unique
    rating     Int // 1-5
    comment    String?
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@map("reviews")
}

// Enums
enum UserRole {
    CUSTOMER
    RIDER
    VENDOR
    ADMIN
}

enum VehicleType {
    BIKE
    CAR
    MOTORCYCLE
}

enum OrderStatus {
    PENDING
    CONFIRMED
    PREPARING
    READY_FOR_PICKUP
    PICKED_UP
    OUT_FOR_DELIVERY
    DELIVERED
    CANCELLED
}

enum AddOnCategory {
    EXTRA
    SIZE
    SIDE
    CUSTOMIZATION
}